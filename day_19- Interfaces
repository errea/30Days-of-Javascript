using System;
public interface AdvancedArithmetic{
    int divisorSum(int n);
}

public class Calculator : AdvancedArithmetic
{
    public int divisorSum(int n)
    {
      int sum = 0;
        for (int i = 1; i <= n; i++)
        {
            if (n % i == 0) sum += i;
        }
        return sum;
    }
}

class Solution{
    static void Main(string[] args){
        int n = Int32.Parse(Console.ReadLine());
      	AdvancedArithmetic myCalculator = new Calculator();
        int sum = myCalculator.divisorSum(n);
        Console.WriteLine("I implemented: AdvancedArithmetic\n" + sum); 
    }
}

/* C# CODE */

class AdvancedArithmetic {
  divisor(n) {
    return n || 0;
  };
}

class Calculator extends AdvancedArithmetic {
  constructor(props) {
    super(props);

    this.divisor = this.divisorSum.bind(this);
  }

  divisorSum(n) {
    return Array(n).fill(0).reduce((target, item, index) => {
      !(n % (index + 1)) && (target += (index + 1)) ;

      return target;
    }, 0);
  }
}

function Solution () {
  const n = 6;

  const myCalculator = new Calculator();

  let sum = myCalculator.divisor(n);

  console.log("I implemented: AdvancedArithmetic\n" + sum); 
}

Solution();